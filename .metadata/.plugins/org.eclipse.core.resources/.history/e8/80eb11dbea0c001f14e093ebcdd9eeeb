package com.ezen.www.security;

import java.io.IOException;

import javax.inject.Inject;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.security.core.Authentication;
import org.springframework.security.web.DefaultRedirectStrategy;
import org.springframework.security.web.RedirectStrategy;
import org.springframework.security.web.WebAttributes;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.savedrequest.HttpSessionRequestCache;
import org.springframework.security.web.savedrequest.RequestCache;
import org.springframework.security.web.savedrequest.SavedRequest;
import org.springframework.stereotype.Component;

import com.ezen.www.service.UserService;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class LoginSuccessHandler implements AuthenticationSuccessHandler {

	@Getter
	@Setter
	private String authEmail;
	
	@Getter
	@Setter
	private String authUrl;
	
	//redirect 데이터를 가지고 리다이렉트 하는 역할
	private RedirectStrategy redstg = new DefaultRedirectStrategy();
	
	//로그인에 대한 정보나 경로
	private RequestCache reqCache = new HttpSessionRequestCache();
	
	//로으인 일자 기록 lastLogin
	@Inject
	private UserService usv;
	
	
	@Override
	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
			Authentication authentication) throws IOException, ServletException {

		//authentication 인증된 AuthUser 객체
		setAuthEmail(authentication.getName());
		setAuthUrl("/board/list");
		
		//로그인 일자 기록 lastLogin
		
		int isOk = usv.updateLastLogin(getAuthEmail());
		
		//세션 가져오기
		HttpSession ses = request.getSession();
		if(isOk == 0 && ses == null) {
			return;
		}
		
		//security에서 로그인에 시도하여 실패하면 로그인기록 남게됨.
		//이전에 시도한 Security의 인증 실패에 대한 기록을 삭제
		ses.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);
		
		//내가 로그인하기 바로전에 방문했던 최근 방문기록이 Histrory로 남아있기떄문에 직접request로 돌아가게 해준다. 
		SavedRequest saveReq = reqCache.getRequest(request, response);
		
	}

}






